{
	// Place your leetcode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Leetcode File Template": {
		"prefix": "leetcode",
		"body": [
			"# ${fileBasename}. ${1:Longest Consecutive Sequence}",
			"",
			"from collections import defaultdict",
			"from typing import List",
			"from icecream import ic",
			"",
			"class Solution:",
			"    def ${2:longestConsecutive}(self, ${3:nums}${4:: List[int]}) -> ${5:int}:",
			"        pass",
			"        # Implement the logic here",
			"",
			"if __name__ == \"__main__\":",
			"    sol = Solution()",
			"    kwargs_list = [",
			"        ({\"${3:nums}\": [0, 3, 7, 2, 5, 8, 4, 6, 0, 1]}, ${6:9}),",
			"    ]",
			"    for kwargs, expected in kwargs_list:",
			"        result = sol.${2:longestConsecutive}(**kwargs)",
			"        assert result == expected"
		],
		"description": "leetcode 128"
	},
	"Test Solution __name__ == \"__main__\" Snippet": {
		"prefix": "__nlres",
		"body": [
			"if __name__ == \"__main__\":",
			"    from pprint import pformat  # , pprint",
			"    null = None",
			"    test_number = 0",
			"    sol = Solution()",
			"    null = None",
			"    kwargs_list = [",
			"        ({\"digits\": \"23\"}, [\"ad\", \"ae\", \"af\",",
			"         \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]),",
			"        ({\"digits\": \"2\"}, [\"a\", \"b\", \"c\"]),",
			"    ]",
			"    test_number = 0",
			"    for kwargs, expected in kwargs_list:",
			"        test_number += 1",
			"        print(",
			"            \"-\"*30+f\"\\nNew Solution {test_number}.: {pformat(kwargs, indent=2)}\")",
			"        result = sol.letterCombinations(**kwargs)",
			"        assert result == expected, f\"Test {test_number}. Failed ðŸš¨.\\n{",
			"            result}\\n\"+(\"!=\"*15)+f\"\\n{expected}\"",
			"        print(f\"Test {test_number}. Passed âœ…\")"
		],
		"description": "Snippet for testing Solution class"
	}
}